# -*- eval: (remove-hook 'before-save-hook 'org-encrypt-entries t); eval: (auto-save-mode 0); -*-
#+TITLE: Configuration
#+AUTHOR: Richard Sent
#+PROPERTY: header-args :results silent :tangle yes :mkdirp yes

This is a comprehensive configuration file for my system.

* TODO adjust format for how sway is configured

i.e. have signal number (10) for volume logically grouped together
instead of disparate.

* Warning!

When using noweb, be /very/ careful to be consistent with function
names. If I make a mistake (i.e. using ~src/~ for the name and ~src-~
in the call), ~my/tangle-init~ will fail silently for the rest of the session.

* Base

I also have a =daemon.sh= file that creates any necessary background
daemons.

#+begin_src shell :tangle ~/daemon.sh :shebang #!/usr/bin/env bash
#+end_src

** Logging

=setup.sh= and any daemons I create should log to this file. Note that
this returns ~" "~ around  the object if you use noweb. As such, I use
~${HOME}/~ instead of ~~/~ as =bash= will complain otherwise if you
try to use it during redirection.

#+NAME: src/config-log-file
#+begin_src emacs-lisp :tangle no
  "${HOME}/.log.txt"
#+end_src

* Fontconfig

#+begin_src xml :tangle ~/.config/fontconfig/fonts.conf
  <?xml version="1.0"?>
  <!DOCTYPE fontconfig SYSTEM "urn:fontconfig:fonts.dtd">
  <fontconfig>
    <alias>
      <family>sans-serif</family>
      <prefer>
	<family>Fira Sans</family>
	<family>Liberation Sans</family>
	<family>Noto Sans</family>
      </prefer>
    </alias>
    <alias>
      <family>monospace</family>
      <prefer>
	<family>Fira Code</family>
	<family>Fira Mono</family>
	<family>Liberation Mono</family>
      </prefer>
    </alias>
    <alias>
      <family>serif</family>
      <prefer>
	<family>Liberation Serif</family>
	<family>Noto Serif</family>
      </prefer>
    </alias>
  </fontconfig>
#+end_src

* Sway

** Variables

#+begin_src conf :tangle ~/.config/sway/config
  ### Variables
  #
  # Logo key. Use Mod1 for Alt.
  set $mod Mod4
  # Home row direction keys, like vim
  set $left h
  set $down j
  set $up k
  set $right l
  # Your preferred terminal emulator
  set $term alacritty
  # Your preferred application launcher
  # Note: pass the final command to swaymsg so that the resulting window can be opened
  # on the original workspace that the command was run on.
  set $menu dmenu_path | dmenu | xargs swaymsg exec --
#+end_src

** Output

#+begin_src conf :tangle ~/.config/sway/config
  ### Output configuration
  #
  # Default wallpaper (more resolutions are available in /usr/share/backgrounds/sway/)
  output * bg /usr/share/backgrounds/sway/Sway_Wallpaper_Blue_1920x1080.png fill
  #
  # Example configuration:
  ##   output HDMI-A-1 resolution 1920x1080 position 1920,0
  output eDP-1 resolution 2560x1600 pos 0 0 scale 2
  #
  # You can get the names of your outputs by running: swaymsg -t get_outputs
#+end_src

** Idle

#+begin_src conf :tangle ~/.config/sway/config
  ### Idle configuration
  #
  # Example configuration:
  #
  # exec swayidle -w \
  #          timeout 300 'swaylock -f -c 000000' \
  #          timeout 600 'swaymsg "output * dpms off"' resume 'swaymsg "output * dpms on"' \
  #          before-sleep 'swaylock -f -c 000000'
  #
  # This will lock your screen after 300 seconds of inactivity, then turn off
  # your displays after another 300 seconds, and turn your screens back on when
  # resumed. It will also lock your screen before your computer goes to sleep.
#+end_src

** Input

#+begin_src conf :tangle ~/.config/sway/config
  ### Input configuration
  #
  # Example configuration:
  #
  #   input "2:14:SynPS/2_Synaptics_TouchPad" {
  #       dwt enabled
  #       tap enabled
  #       natural_scroll enabled
  #       middle_emulation enabled
  #   }
  #
  input "type:keyboard" {
    xkb_options ctrl:nocaps
  }

  # Lower trackpoint sensitivity, -1 <= pointer_accel <= 1
  # Numbers closer to 1 mean a large acceleration, while -1 is vice versa
  input 2:10:TPPS/2_Elan_TrackPoint pointer_accel -0.7
  # Lower trackpoint scrolling sensitivity, 0 <= scroll_factor < inf
  # https://github.com/swaywm/sway/issues/3004
  # Thanks SpencerMichaels
  input 2:10:TPPS/2_Elan_TrackPoint scroll_factor 0.3

  # You can get the names of your inputs by running: swaymsg -t get_inputs
  # Read `man 5 sway-input` for more information about this section.
#+end_src

** Key Bindings

*** Basics

#+begin_src conf :tangle ~/.config/sway/config
  ### Key bindings
  #
  # Basics:
  #
  # Start a terminal
  bindsym $mod+Return exec $term

  # Kill focused window
  bindsym $mod+Shift+q kill

  # Start your launcher
  bindsym $mod+d exec $menu

  # Drag floating windows by holding down $mod and left mouse button.
  # Resize them with right mouse button + $mod.
  # Despite the name, also works for non-floating windows.
  # Change normal to inverse to use left mouse button for resizing and right
  # mouse button for dragging.
  floating_modifier $mod normal

  # Reload the configuration file
  bindsym $mod+Shift+c reload

  # Exit sway (logs you out of your Wayland session)
  bindsym $mod+Shift+e exec swaynag -t warning -m 'You pressed the exit shortcut. Do you really want to exit sway? This will end your Wayland session.' -b 'Yes, exit sway' 'swaymsg exit'
#+end_src

*** Navigation

#+begin_src conf :tangle ~/.config/sway/config
  #
  # Moving around:
  #
  # Move your focus around
  bindsym $mod+$left focus left
  bindsym $mod+$down focus down
  bindsym $mod+$up focus up
  bindsym $mod+$right focus right
  # Or use $mod+[up|down|left|right]
  bindsym $mod+Left focus left
  bindsym $mod+Down focus down
  bindsym $mod+Up focus up
  bindsym $mod+Right focus right

  # Move the focused window with the same, but add Shift
  bindsym $mod+Shift+$left move left
  bindsym $mod+Shift+$down move down
  bindsym $mod+Shift+$up move up
  bindsym $mod+Shift+$right move right
  # Ditto, with arrow keys
  bindsym $mod+Shift+Left move left
  bindsym $mod+Shift+Down move down
  bindsym $mod+Shift+Up move up
  bindsym $mod+Shift+Right move right
#+end_src

*** Workspaces

#+begin_src conf :tangle ~/.config/sway/config
  #
  # Workspaces:
  #
  # Switch to workspace
  bindsym $mod+1 workspace number 1
  bindsym $mod+2 workspace number 2
  bindsym $mod+3 workspace number 3
  bindsym $mod+4 workspace number 4
  bindsym $mod+5 workspace number 5
  bindsym $mod+6 workspace number 6
  bindsym $mod+7 workspace number 7
  bindsym $mod+8 workspace number 8
  bindsym $mod+9 workspace number 9
  bindsym $mod+0 workspace number 10
  # Move focused container to workspace
  bindsym $mod+Shift+1 move container to workspace number 1
  bindsym $mod+Shift+2 move container to workspace number 2
  bindsym $mod+Shift+3 move container to workspace number 3
  bindsym $mod+Shift+4 move container to workspace number 4
  bindsym $mod+Shift+5 move container to workspace number 5
  bindsym $mod+Shift+6 move container to workspace number 6
  bindsym $mod+Shift+7 move container to workspace number 7
  bindsym $mod+Shift+8 move container to workspace number 8
  bindsym $mod+Shift+9 move container to workspace number 9
  bindsym $mod+Shift+0 move container to workspace number 10
  # Note: workspaces can have any name you want, not just numbers.
  # We just use 1-10 as the default.
#+end_src

*** Layout

#+begin_src conf :tangle ~/.config/sway/config
  #
  # Layout stuff:
  #
  # You can "split" the current object of your focus with
  # $mod+b or $mod+v, for horizontal and vertical splits
  # respectively.
  bindsym $mod+b splith
  bindsym $mod+v splitv

  # Switch the current container between different layout styles
  bindsym $mod+s layout stacking
  bindsym $mod+w layout tabbed
  bindsym $mod+e layout toggle split

  # Make the current focus fullscreen
  bindsym $mod+f fullscreen

  # Toggle the current focus between tiling and floating mode
  bindsym $mod+Shift+space floating toggle

  # Swap focus between the tiling area and the floating area
  bindsym $mod+space focus mode_toggle

  # Move focus to the parent container
  bindsym $mod+a focus parent
#+end_src

*** Scratchpad

#+begin_src conf :tangle ~/.config/sway/config
  #
  # Scratchpad:
  #
  # Sway has a "scratchpad", which is a bag of holding for windows.
  # You can send windows there and get them back later.

  # Move the currently focused window to the scratchpad
  bindsym $mod+Shift+minus move scratchpad

  # Show the next scratchpad window or hide the focused scratchpad window.
  # If there are multiple scratchpad windows, this command cycles through them.
  bindsym $mod+minus scratchpad show
#+end_src

*** Resizing

#+begin_src conf :tangle ~/.config/sway/config
  #
  # Resizing containers:
  #
  mode "resize" {
  # left will shrink the containers width
  # right will grow the containers width
  # up will shrink the containers height
  # down will grow the containers height
  bindsym $left resize shrink width 10px
  bindsym $down resize grow height 10px
  bindsym $up resize shrink height 10px
  bindsym $right resize grow width 10px

  # Ditto, with arrow keys
  bindsym Left resize shrink width 10px
  bindsym Down resize grow height 10px
  bindsym Up resize shrink height 10px
  bindsym Right resize grow width 10px

  # Return to default mode
  bindsym Return mode "default"
  bindsym Escape mode "default"
  }
  bindsym $mod+r mode "resize"
#+end_src

** Status Bar

#+begin_src conf :tangle ~/.config/sway/config
  #
  # Status Bar:
  #
  # Read `man 5 sway-bar` for more information about this section.
  bar {
      position top

      # When the status_command prints a new line to stdout, swaybar updates.
      # The default just shows the current date and time.
      # status_command while date +'%Y-%m-%d %l:%M:%S %p'; do sleep 1; done

      status_command i3blocks

      colors {
          statusline #ffffff
          background #323232
          inactive_workspace #32323200 #32323200 #5c5c5c
      }
  }
#+end_src

*** i3blocks

#+begin_src conf :tangle ~/.config/i3blocks/config
  # i3blocks configuration file
  #
  # The i3blocks man page describes the usage of the binary,
  # and its website describes the configuration:
  #
  #     https://vivien.github.io/i3blocks
  # Global properties
  separator=true
  separator_block_width=25

  [emerge]
  color=#a5ef19
  # No (xx of yy). Seems TOML messes with regex slightly.
  # I found a solution that worked in the shell but not here.
  # command=qlop -qrM | awk -F'/|[.]|( ETA: )' '{printf "emerging %s %4ds %s\n", $2, $NF, substr($5, index($5, " ")+1, length($5))}'
  command=qlop -qrM | awk -F'[ /.]' '{printf "emerging %s %4ds\n", $4, $NF}'
  interval=1

  # FIXME run on headphones plug-in/remove
  # FIXME literate config signal number as variable
  [volume]
  command=~/bin/volume.sh
  interval=once
  signal=10

  [battery]
  command=~/bin/battery.sh
  interval=10

  [time]
  command=date '+%Y-%m-%d %H:%M:%S'
  interval=1
#+end_src

**** Scripts

***** volume

#+begin_src shell :tangle ~/bin/volume.sh :shebang !#/usr/bin/env bash
  VOL=$(pactl get-sink-volume @DEFAULT_SINK@ | awk '$1=="Volume:" {printf "%4s", $5}')

  # Full and short texts
  echo "Volume: $VOL"
  echo "VOL: $VOL"

  # Set urgent if we can't get volume
  [ -z ${VOL}  ] && exit 33

  exit 0
#+end_src

***** battery

#+begin_src shell :tangle ~/bin/battery.sh :shebang !#/usr/bin/env bash
  #!/usr/bin/env bash
  # FIXME grep fails at < 10% with 3rd [0-9]
  BAT=$(acpi -b | grep -E -o '[0-9][0-9][0-9]?%')

  # Full and short texts
  echo "Battery: $BAT"
  echo "BAT: $BAT"

  # Set urgent flag below 5% or use orange below 20%
  [ ${BAT%?} -le 5  ] && exit 33
  # [ ${BAT%?} == 100 ] && echo "$00FF00"
  [ ${BAT%?} -le 20 ] && echo "$FF8000"

  exit 0

#+end_src

** System Configuration

#+begin_src conf :tangle ~/.config/sway/config
  include /etc/sway/config.d/*
#+end_src


** Brightness

#+begin_src conf :tangle ~/.config/sway/config
  # Use dev-libs/light for monitor brightness
  # FIXME better way to save brightness?
  bindsym XF86MonBrightnessDown exec light -U 10 && light -O
  bindsym XF86MonBrightnessUp   exec light -A 10 && light -O
  # Restore previous brightness on startup
  exec light -I
#+end_src

** Sound

#+begin_src conf :tangle ~/.config/sway/config
  # Use pulseaudio for sound control
  # FIXME literate config signal number as variable
  bindsym XF86AudioRaiseVolume exec pactl set-sink-volume @DEFAULT_SINK@ +5% && pkill -SIGRTMIN+10 i3blocks
  bindsym XF86AudioLowerVolume exec pactl set-sink-volume @DEFAULT_SINK@ -5% && pkill -SIGRTMIN+10 i3blocks
  bindsym XF86AudioMute exec pactl set-sink-mute @DEFAULT_SINK@ toggle && pkill -SIGRTMIN+10 i3blocks
  bindsym XF86AudioMicMute exec pactl set-source-mute @DEFAULT_SOURCE@ toggle
#+end_src


* Bash

** .bashrc

An incomplete =.bashrc= file. I plan on breaking it up across the
config file.

#+begin_src shell :tangle ~/.bashrc
  # /etc/skel/.bashrc
  #
  # This file is sourced by all *interactive* bash shells on startup,
  # including some apparently interactive shells such as scp and rcp
  # that can't tolerate any output.  So make sure this doesn't display
  # anything or bad things will happen !

  export PATH=~/bin:$PATH

  # Test for an interactive shell.  There is no need to set anything
  # past this point for scp and rcp, and it's important to refrain from
  # outputting anything in those cases.
  if [[ $- != *i* ]] ; then
      # Shell is non-interactive.  Be done now!
      return
  fi

  # Put your fun stuff here.
  alias dotfiles='/usr/bin/git --git-dir=$HOME/.dotfiles/ --work-tree=$HOME'

  # Color output from less
  export LESS_TERMCAP_mb=$'\e[1;32m'
  export LESS_TERMCAP_md=$'\e[1;32m'
  export LESS_TERMCAP_me=$'\e[0m'
  export LESS_TERMCAP_se=$'\e[0m'
  export LESS_TERMCAP_so=$'\e[01;33m'
  export LESS_TERMCAP_ue=$'\e[0m'
  export LESS_TERMCAP_us=$'\e[1;4;31m'

  # Rbenv setup, trying new method to only run if rbenv is installed
  # "$(rbenv init -)"
  if type rbenv >/dev/null 2>&1
  then
      $(rbenv init -)
  fi

  # Use ssh-agent to temporarily store passphrases in RAM
  if ! pgrep -u "$USER" ssh-agent > /dev/null; then
      ssh-agent -t 1h > "$XDG_RUNTIME_DIR/ssh-agent.env"
  fi
  if [[ ! "$SSH_AUTH_SOCK" ]]; then
      source "$XDG_RUNTIME_DIR/ssh-agent.env" >/dev/null
  fi

  # Colored diffs and colored cats (meow)
  alias cdiff=colordiff
  alias ccat=bat

  export EDITOR=$'jove'
#+end_src

* Emacs

** Installation

I'll write this up later.

** Configuration

*** Meta

Much of this section was +stolen+ borrowed from [[https://github.com/larstvei/dot-emacs][larstvei]].

All changes to the configuration should be done in =init.org=, *not* in
=init.el=. Any changes in the =init.el= will be overwritten by saving
=init.org=. The =init.el= in this repo should not be tracked by git, and
is replaced the first time Emacs is started (assuming it has been renamed
to =~/.emacs.d=).

Emacs can't load =.org=-files directly, but =org-mode= provides functions
to extract the code blocks and write them to a file. There are multiple
ways of handling this; like suggested by [[http://emacs.stackexchange.com/questions/3143/can-i-use-org-mode-to-structure-my-emacs-or-other-el-configuration-file][this StackOverflow post]], one
could just use =org-babel-load-file=, but I had problems with
byte-compilation. Previously I tracked both the =org.=- and =el.=-files,
but the git commits got a little messy. So here is a new approach.

When this configuration is loaded for the first time, the =init.el= is
the file that is loaded. It looks like this:

#+BEGIN_SRC emacs-lisp :tangle no
  ;; This file replaces itself with the actual configuration at first run.

  ;; We can't tangle without org!
  (require 'org)
  ;; Open the configuration
  (find-file (concat user-emacs-directory "init.org"))
  ;; tangle it
  (org-babel-tangle)
  ;; load it
  (load-file (concat user-emacs-directory "init.el"))
  ;; finally byte-compile it
  (byte-compile-file (concat user-emacs-directory "init.el"))
#+END_SRC

It tangles the org-file, so that this file is overwritten with the actual
configuration.

There is no reason to track the =init.el= that is generated; by running
the following command =git= will not bother tracking it:

#+BEGIN_SRC sh :tangle no
  git update-index --assume-unchanged init.el
#+END_SRC

If one wishes to make changes to the repo-version of =init.el= start
tracking again with:

#+BEGIN_SRC sh :tangle no
  git update-index --no-assume-unchanged init.el
#+END_SRC

**** Lexical Scoping

I want lexical scoping for the init-file, which can be specified in the
header. The first line of the configuration is as follows:

#+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
  ;;; -*- lexical-binding: t -*-
#+END_SRC

**** Auto-tangle Hook

The =init.el= should (after the first run) mirror the source blocks in
the =init.org=. We can use =C-c C-v t= to run =org-babel-tangle=, which
extracts the code blocks from the current file into a source-specific
file (in this case a =.el=-file).

To avoid doing this each time a change is made we can add a function to
the =after-save-hook= ensuring to always tangle and byte-compile the
=org=-document after changes.

I use =Org Crypt=, which has a feature where it will encrypt your
=org= file when you save. This breaks tangling. I had to modify this
function to tangle everything first, then encrypt before saving.

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (defun my/tangle-init ()
    "If the current buffer is 'init.org' the code-blocks are
  tangled, and the tangled file is compiled."
    ;; org-babel-tangle runs save-buffer as a hook. Somewhere along the
    ;; line the current buffer goes back to init.org, leading to an
    ;; infinite loop when using before-save-hook. Now we create a
    ;; tempory buffer with unsaved contents, tangle this buffer, and
    ;; then save, so unencrypted content is tangled and re-encrypted
    ;; before saving.

    (when (equal (buffer-file-name) (expand-file-name "~/config.org"))
      ;; Avoid running hooks when tangling.
      (let ((prog-mode-hook nil) (before-save-hook nil))
	(org-decrypt-entries)
	(org-babel-tangle)
	(org-encrypt-entries))
      (byte-compile-file (concat user-emacs-directory "init.el"))))

  (add-hook
   'org-mode-hook
   (lambda () (add-hook 'before-save-hook 'my/tangle-init nil t)))
#+end_src

*** Basics

**** Bootstraps

***** Guix

Installs =Guix= at the system level. They provide a script to help
with installation across multiple architectures that I download and
run.

~sudo~ is broke and won't consistently read properly from stdin with
-S. See https://serverfault.com/questions/477968. After struggling for
a long time (check the subheading for how far my plight went), I
decided to create a Comint process.

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  ;; Don't install if already present
  (let ((guix-present (condition-case nil
			  (start-process "guix-test" nil "guix" "--version")
			(error nil))))
    (unless guix-present
      (let ((guix-script
	     (with-current-buffer
		 (url-retrieve-synchronously
		  "https://git.savannah.gnu.org/cgit/guix.git/plain/etc/guix-install.sh"
		  'silent 'inhibit-cookies)
	       ;; Remove HTTP headers
	       ;; https://emacs.stackexchange.com/questions/12464
	       (goto-char (point-min))
	       (re-search-forward "^$")
	       (delete-region (point) (point-min))
	       (buffer-string))))
	;; root permissions required
	;; https://emacs.stackexchange.com/questions/29555
	(let ((name "guix-install")
	      (guix-script-file (make-temp-file "guix-" nil ".sh" guix-script)))
	  (make-comint-in-buffer name nil "sudo" nil "sh" guix-script-file)
	  (display-buffer (process-buffer (get-process name))
			  '(display-buffer-pop-up-window . '(('window-height . 1.0)
							     ('window-width . 0.5)))
							 nil)))))
#+end_src

****** COMMENT Emacs-server + sudo entry

There's a neat trick I found with entering passwords within Emacs, but
it requires using Emacs server. I should modify this to start from
somewhere else.

https://old.reddit.com/r/emacs/comments/kvvrmx/can_sudo_askpass_use_emacs/gj1l989/

=SUDO_ASKPASS=emacsclient -e '(read-passwd "sudo password: ")' | xargs=

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (server-start)
#+end_src

#+begin_src bash :tangle
#+end_src

***** Straight

I use [[https://github.com/raxod502/straight.el][straight.el]] for package management. This is boostrap code from
the Github repo to set up straight.

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (setq straight-repository-branch "develop") ; prebuild support for mu4e
  (defvar straight-fix-flycheck t)
  (defvar bootstrap-version)
  (let ((bootstrap-file
	 (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
	(bootstrap-version 5))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
	  (url-retrieve-synchronously
	   "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
	   'silent 'inhibit-cookies)
	(goto-char (point-max))
	(eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))
  (straight-use-package 'use-package)         ; Install use-package
  (setq straight-use-package-by-default t)    ; I don't want to type :straight t a billion times
#+end_src

***** Bind-keys

I'm not entirely sure why this is necessary, and more importantly,
what better solutions there are. But when byte-compiling Emacs,
bind-keys isn't properly loaded by use-package. This means any
custom (and most built-in) keybindings are nonfunctional.

Solution found [[https://old.reddit.com/r/emacs/comments/c6fvvr/unable_to_initialize_package_with_usepackage/es92xjd/][here]].

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (use-package bind-key)
#+end_src

**** exec-path-from-shell

I don't want to worry about stuff breaking because of environment
variable weirdness.

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (use-package exec-path-from-shell
    :demand t
    :config
    (when (memq window-system '(mac ns x))
      (exec-path-from-shell-initialize)))
#+end_src

**** no-littering

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (use-package no-littering
    :demand t
    :config
    (setq auto-save-file-name-transforms
	  `((".*" ,(no-littering-expand-var-file-name "auto-save/") t))))
#+end_src

**** Speedup

We want to keep the garbage collector from running while we initialize
everything. We can reset it later to a more reasonable value. If we
didn't do this, Emacs would hang when running the garbage collector.

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (setq-default
   gc-cons-threshold most-positive-fixnum ; 8 MiB
   gc-cons-percentage 0.6)
#+end_src

Replace the file-name-handler-alist to nil, as regexing is cpu
intensive. We need to keep the original value to restore it later. I
don't know all the details behind it, but it sounds helpful!

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (defvar default-file-name-handler-alist file-name-handler-alist)
  (setq file-name-handler-alist nil)
#+end_src

And now we revert the changes with a startup hook. ~16777216~ is the
value Doom uses.

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (add-hook 'emacs-startup-hook
            (lambda ()
              (setq gc-cons-threshold 16777216
                    gc-cons-percentage 0.1
                    file-name-handler-alist default-file-name-handler-alist)))
#+end_src

Garbage-collect on focus-out. Emacs /should/ feel snappier overall.
With Emacs 27.1, focus-out-hook is deprecated.

#+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
  (add-function :after after-focus-change-function (unless (frame-focus-state) #'garbage-collect))
#+END_SRC

Apparently this can result in a significant speedup when using fonts
larger or smaller than the system default.

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (setq frame-inhibit-implied-resize t)
#+end_src

***** Results

****** Early Init

As of [2021-02-18 Thu], tangling everything to early-init.el saved 0.06 seconds.

**** Sensible Defaults

I don't need no fancy user interface! These ones are only active when
in a window. Apparently putting this in ~early-init.el~ will speed up
startup even more.

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (push '(menu-bar-lines . 1) default-frame-alist)
  (push '(tool-bar-lines . 0) default-frame-alist)
  (push '(vertical-scroll-bars) default-frame-alist)
#+end_src

And now for a bunch of one liner configurations.

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (setq-default
   auth-source-save-behavior nil                 ; Not interested in auth-source
   frame-resize-pixelwise t                      ; Removes empty space at bottom of screen when maximized
   help-window-select t                          ; Select help windows when they appear
   inhibit-startup-screen t                      ; Emacs really could use a more "welcoming" welcome screen
   initial-scratch-message ""                    ; Clear scratch buffer
   next-screen-context-lines 6                   ; Keep 6 lines of context when using scroll-up/down-command
   ring-bell-function 'ignore                    ; My ears!
   scroll-conservatively most-positive-fixnum    ; Always scroll by one line
   scroll-preserve-screen-position t             ; Try to keep point in the same location visually
   sentence-end-double-space nil                 ; Use a single space after dots
   show-help-function nil                        ; Disable help text on most UI elements
   uniquify-buffer-name-style 'forward           ; Make buffer names unique
   use-dialog-box nil                            ; Apparently compile reverting buffers counts as a mouse command
   auto-save-timeout 1200                        ; Otherwise Org Crypt will encrypt file constantly
   )
  (defalias 'yes-or-no-p 'y-or-n-p)              ; y is shorter than yes
  (delete-selection-mode 1)                      ; If I selected something, I probably want to edit it.
  (global-auto-revert-mode 1)                    ; If I edit something elsewhere, I probably want to reload
  (global-hl-line-mode)                          ; Highlight the active line
  (menu-bar-mode 0)                              ; Disable the menu bar
  (scroll-bar-mode 0)                            ; Disable the scroll bar
  (tool-bar-mode 0)                              ; Disable the tool bar
  (set-default-coding-systems 'utf-8)            ; Default to utf-8 encoding
#+end_src

Start Emacs in fullscreen.

#+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el
  (if (eq window-system 'ns)
      (set-frame-parameter nil 'fullscreen 'maximized)
    (set-frame-parameter nil 'fullscreen 'fullboth))
#+END_SRC

I already know about Emacs, thank you.

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (fset 'display-startup-echo-area-message 'ignore)
#+end_src

I don't enjoy Emacs messing with my window layouts.

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (setq display-buffer-alist
	'((".*" (display-buffer-reuse-window display-buffer-same-window))))
  (add-to-list 'display-buffer-alist           ; reuse windows in other frames
	       '("." nil (reusable-frames . t)))

  (setq even-window-sizes nil)                 ; display-buffer: avoid resizing
#+end_src

***** Compilation

When byte compiling, Emacs will go crazy about references to free
variables. Often these are just ~(use-package)~ macros. Not all packages
behave like this, but enough do that I'm putting this in to hope it
will help.

For context the error looks like

#+begin_quote
init.el:77:14: Warning: reference to free variable ‘bind-key’
#+end_quote

where ~bind-key~ can be the name of many different (but not all)
packages.

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  ;; This has no effect. (Actually, it removed the all-the-icons
  ;;  warning, but caused another)
  ; (eval-when-compile (straight-use-package 'use-package))
#+end_src

To hide (but not disable) compilation warnings with native-comp, I'll
change ~warning-suppress-types~.

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (setq warning-suppress-types '((comp)))
#+end_src

***** Disabled Commands

While I could use ~(setq disabled-command-function nil)~, I'd prefer to
disable them piecemeal in the off-chance there's a disabled command I
actually want to be disabled.

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (put 'downcase-region 'disabled nil)           ; Is it really that confusing?
  (put 'erase-buffer 'disabled nil)              ; It's literally in the name
  (put 'upcase-region 'disabled nil)             ; I reiterate. Is it really that confusing?
#+end_src


**** COMMENT ~custom.el~ Support

I disabled this on [2021-11-12 Fri], see [[*Encrypted][Encrypted]].

I have no desire for appending autogenerated elisp to =init.el=. I'd
much rather concentrate that into a single file that I call
=custom.el=. If one doesn't already exist, I want to create a blank
one.

#+BEGIN_SRC emacs-lisp :tangle no
   (write-region "" "" (expand-file-name "custom.el" (file-name-directory (or load-file-name buffer-file-name))) t)
   (setq-default custom-file (expand-file-name "custom.el" (file-name-directory (or load-file-name buffer-file-name))))
   (load custom-file)
#+END_SRC




**** Constants

A slowly growing list of constants. Many of these are thanks to
[[https://github.com/seagle0128/.emacs.d][Centaur Emacs]].

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (defconst sys/win32p                    ; I hope I don't need this constant
    (eq system-type 'windows-nt)
    "Are we running on a WinTel system?")

  (defconst sys/linuxp
    (eq system-type 'gnu/linux)
    "Are we running on a GNU/Linux system?")

  (defconst sys/macp
    (eq system-type 'darwin)
    "Are we running on a Mac system?")

  (defconst sys/mac-x-p
    (and (display-graphic-p) sys/macp)
    "Are we running under X on a Mac system?")

  (defconst sys/mac-ns-p
    (eq window-system 'ns)
    "Are we running on a GNUstep or Macintosh Cocoa display?")

  (defconst sys/mac-cocoa-p
    (featurep 'cocoa)
    "Are we running with Cocoa on a Mac system?")

  (defconst sys/mac-port-p
    (eq window-system 'mac)
    "Are we running a macport build on a Mac system?")

  (defconst sys/linux-x-p
    (and (display-graphic-p) sys/linuxp)
    "Are we running under X on a GNU/Linux system?")

  (defconst sys/cygwinp
    (eq system-type 'cygwin)
    "Are we running on a Cygwin system?")

  (defconst sys/rootp
    (string-equal "root" (getenv "USER"))
    "Are you using ROOT user?")

  (defconst emacs/>=25p
    (>= emacs-major-version 25)
    "Emacs is 25 or above.")

  (defconst emacs/>=26p
    (>= emacs-major-version 26)
    "Emacs is 26 or above.")

  (defconst emacs/>=27p
    (>= emacs-major-version 27)
    "Emacs is 27 or above.")

  (defconst emacs/>=25.3p
    (or emacs/>=26p
	(and (= emacs-major-version 25) (>= emacs-minor-version 3)))
    "Emacs is 25.3 or above.")

  (defconst emacs/>=25.2p
    (or emacs/>=26p
	(and (= emacs-major-version 25) (>= emacs-minor-version 2)))
    "Emacs is 25.2 or above.")
#+end_src

*** Functions

Custom functions from various sources.

**** Org Heading Fontification

Code and explanations from [[https://reddit.com/r/emacs/comments/cw0499/prevent_folded_headings_from_bleeding_out/][/u/ouroboroslisp]] ([[https://web.archive.org/web/20190925072833/https://www.reddit.com/r/emacs/comments/cw0499/prevent_folded_headings_from_bleeding_out/][archive)]] to try and fix
font lock face bleeding out into org headings if there's only one
space. This is most common with source code blocks, although it's not
visible to everyone as some themes may have the same face for source
code blocks and the background.

I've disabled these functions for now since they didn't appear to help
at all with this init.org file. Instead, I found
=org-fontify-whole-block-delimiter-line= and set that to nil.

Unfontify the last line of a subtree if it's the end of a source
block. This is the line responsible for the bleeding.

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  ;; (defun dwim-unfontify-last-line-of-subtree (&rest _)
  ;;   "Unfontify last line of subtree if it's a source block."
  ;;   (save-excursion
  ;;     (org-end-of-subtree)
  ;;     (beginning-of-line)
  ;;     (when (looking-at-p (rx "#+end_src"))
  ;;       (font-lock-unfontify-region
  ;;        (line-end-position) (1+ (line-end-position))))))

  ;; (advice-add #'outline-hide-subtree :after #'dwim-unfontify-last-line-of-subtree)
#+end_src

Now we need to refontify that line at the right time. There’s two
things we need to account for. We need to make sure that the
=#+end_src= line is fontified when it’s visible. Also we should keep
in mind that any newly revealed (ie. By unfolding subtree with
outline-toggle-children) folded source block headings are also
bleeders and need to have their =#+end_src= unfontified also.

It’s also important which functions we choose to advice or modify for
this because we want to minimize the amount of work we want to do.
Ideally, we’d like a pretty core function so that this behavior would
propagate to other functions.

Looking at the source for =outline-toggle-children=, I thought
=outline-show-heading= was a good choice to advise. Keeping all this in
mind I wrote this advising function.

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  ;; (defun dwim-fontify-last-line-of-block (&rest _)
  ;;   "Do what I mean: fontify last line of source block.
  ;;  When the heading has a source block as the last item (in the subtree) do the
  ;;    following:
  ;;  If the source block is now visible, fontify the end its last line.
  ;;  If it’s still invisible, unfontify its last line."
  ;;   (let (font-lock-fn point)
  ;;     (save-excursion
  ;;       (org-end-of-subtree)
  ;;       (beginning-of-line)
  ;;       (run-hooks 'outline-view-change-hook)
  ;;       (when (looking-at-p (rx "#+end_src"))
  ;; 	(setq font-lock-fn
  ;; 	      (if (invisible-p (line-end-position))
  ;; 		  #'font-lock-unfontify-region
  ;; 		#'font-lock-fontify-region))
  ;; 	(funcall font-lock-fn
  ;; 		 (line-end-position)
  ;; 		 (1+ (line-end-position)))))))

  ;; (advice-add #'outline-show-heading :after #'dwim-fontify-last-line-of-block)
#+end_src

**** Sort words
Sort words in region alphabetically. If arg is negative, sort them in
reverse.

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (defun sort-words (reverse beg end)
    "Sort words in region alphabetically, in REVERSE if negative.
  Prefixed with negative \\[universal-argument], sorts in reverse.

  The variable `sort-fold-case' determines whether alphabetic case
  affects the sort order.

  See `sort-regexp-fields'."
    (interactive "*P\nr")
    (sort-regexp-fields reverse "\\w+" "\\&" beg end))
#+end_src

**** Packages

Functions used by packages I have installed.

Return t if a font is installed, nil otherwise. Used by
=all-the-icons=.

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (defun aorst/font-installed-p (font-name)
    "Check if font with FONT-NAME is available."
    (if (find-font (font-spec :name font-name))
        t
      nil))
#+end_src

A duo of functions for getting human readable file sizes. Used by
=ibuffer-vc=.

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (defun ajv/human-readable-file-sizes-to-bytes (string)
    "Convert a human-readable file size into bytes."
    (interactive)
    (cond
     ((string-suffix-p "G" string t)
      (* 1000000000 (string-to-number (substring string 0 (- (length string) 1)))))
     ((string-suffix-p "M" string t)
      (* 1000000 (string-to-number (substring string 0 (- (length string) 1)))))
     ((string-suffix-p "K" string t)
      (* 1000 (string-to-number (substring string 0 (- (length string) 1)))))
     (t
      (string-to-number (substring string 0 (- (length string) 1))))
     )
    )
  (defun ajv/bytes-to-human-readable-file-sizes (bytes)
    "Convert number of bytes to human-readable file size."
    (interactive)
    (cond
     ((> bytes 1000000000) (format "%10.1fG" (/ bytes 1000000000.0)))
     ((> bytes 100000000) (format "%10.0fM" (/ bytes 1000000.0)))
     ((> bytes 1000000) (format "%10.1fM" (/ bytes 1000000.0)))
     ((> bytes 100000) (format "%10.0fk" (/ bytes 1000.0)))
     ((> bytes 1000) (format "%10.1fk" (/ bytes 1000.0)))
     (t (format "%10d" bytes)))
    )
#+end_src

*** UI

**** Icons

| =all-the-icons=       | https://github.com/domtronn/all-the-icons.el  |
| =all-the-icons-dired= | https://github.com/jtbm37/all-the-icons-dired |

I like having pretty icons next to a lot of things. I also don't like
remembering to install them on a new machine.

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (use-package all-the-icons
    :config
    (when (and (not (aorst/font-installed-p "all-the-icons"))
               (window-system))
      (all-the-icons-install-fonts t))
    :defer 1)
#+end_src

I also like having them in dired.

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (use-package all-the-icons-dired
    :hook (dired-mode . all-the-icons-dired-mode))
#+end_src

**** Themes

| =doom-themes= | https://github.com/hlissner/emacs-doom-themes |

Why install one theme when many will do? Yeah, that sounds right.

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (use-package doom-themes
    :config (load-theme 'doom-monokai-pro t))
#+end_src

**** Fontq

I like being able to see the text on my screen.

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (add-to-list 'default-frame-alist '(font . "Fira Code-9"))
#+end_src

**** Ibuffer

| =all-the-icons-ibuffer= | https://github.com/seagle0128/all-the-icons-ibuffer |
| =ibuffer-vc=            | https://github.com/purcell/ibuffer-vc               |

First and foremost, replace =list-buffers= with =Ibuffer=

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (global-set-key (kbd "C-x C-b") 'ibuffer)
#+end_src

Next, I'll set up some pretty icons.

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (use-package all-the-icons-ibuffer
    :diminish
    :after all-the-icons)
#+end_src

Time to actually make =Ibuffer= functional by setting up automatic version
control groups.

FIXME: Currently the ~*Help*~ buffer is not properly aligned with the others.

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (use-package ibuffer-vc ; Also consider ibuffer-projectile
    :after all-the-icons-ibuffer
    :hook (ibuffer . (lambda () (ibuffer-vc-set-filter-groups-by-vc-root) ; Look at combining with custom ibuffer groups with 'ibuffer-projectile-generate-filter-groups
                       (unless (eq ibuffer-sorting-mode 'alphabetic)      ; Obviously that's an ibuffer-projectile exclusive, not ibuffer-vc
                         (ibuffer-do-sort-by-alphabetic))))               ; https://emacs.stackexchange.com/questions/2181/ibuffer-how-to-automatically-create-groups-per-project
    :bind ("C-x C-b" . ibuffer)                                           ; shows some of code behind projectile filter groups
    :config
    (define-ibuffer-column size-h
      (:name "Size"
             :inline t
             :summarizer
             (lambda (column-strings)
               (let ((total 0))
                 (dolist (string column-strings)
                   (setq total
                         ;; like, ewww ...
                         (+ (float (ajv/human-readable-file-sizes-to-bytes string))
                            total)))
                 (ajv/bytes-to-human-readable-file-sizes total)))  ;; :summarizer nil
             )
      (ajv/bytes-to-human-readable-file-sizes (buffer-size)))
    (setq ibuffer-formats
          '((mark modified read-only vc-status-mini " "
                  (icon 2 2 :center :elide)
                  " "
                  (name 18 18 :left :elide)
                  " "
                  (size-h 9 -1 :right)
                  " "
                  (mode 20 20 :left :elide)
                  " "
                  (vc-status 16 16 :left)
                  " "
                  vc-relative-file))))
#+end_src

**** Which-key

| =which-key= | https://github.com/justbur/emacs-which-key |

Emacs has a lot of keybindings. I can't remember every keybinding. I
use a tool to remember every keybinding for me.

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (use-package which-key
    :defer 1
    :diminish
    :config (which-key-mode)
    (setq which-key-add-column-padding 3)) ; Easier to visually separate columns
#+end_src

**** Linum

| =linum= | Built-in |

I find the linum foreground color too dim (at least with
~doom-monokai-pro~), so I set it to match the color of comments. This
should be generic enough to work well with most themes.

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (use-package linum
    :hook (prog-mode . linum-mode)
    :after (doom-themes)
    :config
    (defun linum-format-func (line)
      (let ((w (length (number-to-string (count-lines (point-min) (point-max))))))
	(propertize (format (format "%%%dd " w) line) 'face 'linum)))
    (setq linum-format 'linum-format-func)
    (set-face-attribute 'linum nil :foreground (face-attribute 'font-lock-comment-face :foreground)))
#+end_src

**** Modeline

| =doom-modeline= | https://github.com/seagle0128/doom-modeline |
| =diminish=      | https://github.com/emacsmirror/diminish     |

Since I haven't gotten around to customizing my modeline yet, I just
use =doom-modeline=.

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (use-package doom-modeline ; Later, replace with custom following similar process to https://www.gonsie.com/blorg/modeline.html
    :hook (after-init . doom-modeline-mode)
    :custom                               ; Could use more use-package-ifying
    (doom-modeline-height 20)             ; To better employ its features.
    (doom-modeline-bar-width 1)
    (doom-modeline-icon t)
    (doom-modeline-major-mode-icon t)
    (doom-modeline-major-mode-color-icon t)
    (doom-modeline-buffer-file-name-style 'truncate-upto-project)
    (doom-modeline-buffer-state-icon t)
    (doom-modeline-buffer-modification-icon t)
    (doom-modeline-minor-modes nil)
    (doom-modeline-enable-word-count nil)
    (doom-modeline-buffer-encoding t)
    (doom-modeline-indent-info nil)
    (doom-modeline-checker-simple-format t)
    (doom-modeline-vcs-max-length 12)
    (doom-modeline-env-version t)
    (doom-modeline-irc-stylize 'identity)
    (doom-modeline-github-timer nil)
    (doom-modeline-gnus-timer nil))
#+end_src

To help me when I actually do customize the modeline myself, I'll have
=diminish= to hide my active minor modes.

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (use-package diminish)
#+end_src

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (use-package emacs
    :config (display-time))
#+end_src

**** Dashboard

| =dashboard= | https://github.com/emacs-dashboard/emacs-dashboard |

Show a dashboard on startup.

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (use-package dashboard
    :hook (after-init . dashboard-setup-startup-hook)
    :bind (:map dashboard-mode-map
		("n" . dashboard-next-line)
		("p" . dashboard-previous-line))
    :config
    (setq dashboard-project-backend 'projectile
	  ;; initial-buffer-choice (lambda () (get-buffer "*dashboard*"))
	  dashboard-set-navigator t
	  dashboard-startup-banner 'logo
	  dashboard-items '((projects  . 8)
			    (bookmarks . 5)
			    (recents . 5)
			    (agenda . 5))
	  ;; override "p" binding for projects, can't be done with :bind
	  dashboard-item-shortcuts '((recents . "r")
				     (bookmarks . "m")
				     (projects . "o")
				     (agenda . "a")
				     (registers . "e"))
	  dashboard-set-heading-icons t
	  dashboard-set-file-icons t))
#+end_src

**** Beacon

| =beacon= | https://github.com/Malabarba/beacon |

Highlight the line the cursor is on when scrolling.

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (use-package beacon
    :defer 1
    :config (beacon-mode 1))
#+end_src

*** Navigation

**** Ivy

| =ivy=                    | https://github.com/abo-abo/swiper                    |
| =counsel=                | https://github.com/abo-abo/swiper                    |
| =swiper=                 | https://github.com/abo-abo/swiper                    |

Let's start with the backbone of it all. =Ivy= provides a
completion engine that =counsel= and =swiper= build off of.

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (use-package ivy
    :diminish
    :hook (after-init . ivy-mode)
    :config
    (setq ivy-use-virtual-buffers t       ; Recent files and bookmarks in ivy-switch-buffer
	  ivy-count-format "%d/%d "
	  ivy-wrap t))                    ; Wrap around with next-line and previous-line
#+end_src

=counsel= provides many custom functions designed to take advantage of
=ivy=, such as =counsel-find-file=.

FIXME: I'd prefer to find a way to load =counsel= without needing to
use ~:demand t~. I tried ~ivy-mode-hook~ but that caused issues with =prescient=.

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (use-package counsel
    :diminish
    :demand t
    :after ivy
    ;; :bind ("C-x b" . counsel-switch-buffer) ; Disabled due to slowdowns
    :bind (("M-y" . counsel-yank-pop)
	   :map ivy-minibuffer-map
	   ("M-y" . ivy-next-line))
    :config (counsel-mode))
#+end_src

=swiper= is an =isearch= alternative, which is good because I don't
like =isearch=.

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (use-package swiper
    :after ivy
    :bind (("C-s" . swiper)
           ("C-r" . swiper)))
#+end_src

***** Ivy Rich

| =ivy-rich=               | https://github.com/Yevgnen/ivy-rich                  |
| =all-the-icons-ivy-rich= | https://github.com/seagle0128/all-the-icons-ivy-rich |

=ivy-rich= makes things look purdy.

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (use-package ivy-rich
    :after (ivy counsel)
    :config
    (ivy-rich-mode 1)
    (setcdr (assq t ivy-format-functions-alist) #'ivy-format-function-line) ; Recommended in Github repo
    (setq ivy-rich-parse-remote-buffer nil ; https://github.com/Yevgnen/ivy-rich/issues/47
          ivy-rich-parse-remote-file-path nil
          ivy-rich-path-style (quote full)))
#+end_src

=all-the-icons-ivy-rich= makes the purdy thing look purdy.

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (use-package all-the-icons-ivy-rich
    :after all-the-icons ivy-rich
    :config (all-the-icons-ivy-rich-mode 1)
    (set-face-attribute 'all-the-icons-ivy-rich-doc-face nil
			:foreground (face-attribute
				     'font-lock-comment-face :foreground)))
#+end_src

****** DONE fix minibuffer docs being "covered up" when selecting them
CLOSED: [2021-11-16 Tue 18:52]

~all-the-icons-ivy-rich-doc-face~ controls them (possibly indirectly
with inheritance).

I took the same approach as with ~linum~.

***** Counsel-Tramp

| =counsel-tramp= | https://github.com/masasam/emacs-counsel-tramp |

Provides a interface for using =counsel= completion with SSH. Entries
are populated from ~/.ssh/config~. Connections can also be added using
~counsel-tramp-custom-connections~.

Support for =docker= and =vagrant= is also provided if you are using
=docker-tramp= or =vagrant-tramp=.

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (use-package counsel-tramp
    :bind ("C-c t" . counsel-tramp))
#+end_src

**** Prescient

| =prescient=         | https://github.com/raxod502/prescient.el |
| =ivy-prescient=     | https://github.com/raxod502/prescient.el |
| =company-prescient= | https://github.com/raxod502/prescient.el |

=prescient= provide a new completion library for =ivy=, =counsel=, and
and/or =selectrum=.

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (use-package prescient
    :after ivy
    :config (prescient-persist-mode)      ; Save history
    )
#+end_src

=ivy-prescient= provides integration between =ivy= and =prescient=. As
=counsel= modifies user options of =ivy=, we must load it first.

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (use-package ivy-prescient
    :after counsel
    :config (ivy-prescient-mode)
    (setq ivy-prescient-retain-classic-highlighting t)) ; Hard to see matching regions otherwise
#+end_src

=company-prescient= provides integration between =company= and
=prescient=.

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (use-package company-prescient
    :after company
    :config (company-prescient-mode))
#+end_src

**** Projectile

| =projectile=         | https://github.com/bbatsov/projectile           |
| =counsel-projectile= | https://github.com/ericdanan/counsel-projectile |

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (use-package projectile
    :diminish
    :config (projectile-mode +1)
    (setq projectile-completion-system 'ivy     ; Dashboard support
	  projectile-git-submodule-command nil) ; prevent slowdowns with large submodules
    :bind-keymap ("C-c p" . projectile-command-map))
#+end_src

=counsel-projectile= provides integration between =projectile= and
=counsel=.

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (use-package counsel-projectile
    :after (counsel projectile)
    :config (counsel-projectile-mode))
#+end_src

**** Window Management

| =ace-window= | https://github.com/abo-abo/ace-window |

Running ~other-window~ a billion times isn't exactly enjoyable. What
is enjoyable is executing ~ace-window~ once and typing 1-2 keys to
select a window.

Instead of 0-9, =ace-window= will use the home row keys to select a
window.

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (use-package ace-window
    :defines aw-keys
    :commands ace-window
    :bind* ("M-o" . 'ace-window) ; * as ibuffer overrides M-o. Consider adjusting as M-o is used for ivy-dispatching-done
    :config (setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l)))
#+end_src

**** Avy

| =avy= | https://github.com/abo-abo/avy |

Easier navigation within a buffer. Run ~avy-goto-char-2~, type two
characters, then use the home row to select where to move the cursor.

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (use-package avy
    :bind ("C-;" . avy-goto-char-2))
#+end_src

*** Editing

This section is for non-language-specific customizations that still
help with editing.

**** Parentheses

| =highlight-parentheses= | https://github.com/tsdh/highlight-parentheses.el |
| =smartparens=           | https://github.com/Fuco1/smartparens             |

Apparently =rainbow-delimiters= provides similar functionality to
=highlight-parentheses=, I'll look into it later.

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (use-package highlight-parentheses
    :diminish
    :hook ((prog-mode org-mode) . highlight-parentheses-mode))
#+end_src

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (use-package smartparens
    :diminish
    :hook (prog-mode . smartparens-mode)
    :config (require 'smartparens-config))
#+end_src

**** wgrep

| =wrep= | https://github.com/mhayashi1120/Emacs-wgrep |

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (use-package wgrep
    :defer 1)
#+end_src

**** Company

| =company= | https://github.com/company-mode/company-mode |

A text-completion framework. Would like to replace RET with C-j like
=ivy=.

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (use-package company
    :defines company-minimum-prefix-length company-frontends company-idle-delay
    :diminish
    :hook (prog-mode . company-mode)
    :config
    (setq company-minimum-prefix-length 1)
    (setq company-frontends '(company-pseudo-tooltip-frontend
                              company-echo-metadata-frontend))
    (setq company-idle-delay 1))
#+end_src

**** Flycheck

| =flycheck= | https://github.com/flycheck/flycheck |

Syntax checking for Emacs.

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (use-package flycheck
    :diminish
    :defer 1
    :config (setq flycheck-emacs-lisp-load-path 'inherit)  ; Fixes "org-mode-map" in comment-dwin-2 from being undefined
    (define-key flycheck-mode-map flycheck-keymap-prefix nil)
    (setq flycheck-keymap-prefix (kbd "C-c f"))
    (define-key flycheck-mode-map flycheck-keymap-prefix
      flycheck-command-map)
    (global-flycheck-mode))                                ; Does not fix issues with functions may not be defined
#+end_src

***** DONE Replace keybinding C-c ! so it doesn't conflict with org-time-stamp-inactive
CLOSED: [2021-02-02 Tue 14:14]

**** Comments

| =comment-dwim-2= | https://github.com/remyferre/comment-dwim-2 |

I don't enjoy how ~comment-dwim~ and ~comment-line~ are two different
keys for very similar functionality. =comment-dwim-2= provides that
and a bit more. Sometimes indentation seems weird in elisp with
comments not lining up.

This is currently bugged with =enh-ruby-mode=. End of line comments
are not inserted, although it can successfully comment and uncomment
an entire line.

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (use-package comment-dwim-2
    :config
    (defadvice comment-indent (around comment-indent-with-spaces activate) ; Not the cause of enh-ruby-mode issue
      (let ((orig-indent-tabs-mode indent-tabs-mode))
        (when orig-indent-tabs-mode
          (setq indent-tabs-mode nil))
        ad-do-it
        (when orig-indent-tabs-mode
          (setq indent-tabs-mode t))))
    ;; Disabled for now. I want to remove line comment, keeping the
    ;; end of line comment unless I press M-; again.
    ;; Note though, text is killed, not deleted. You can always just
    ;; use C-e C-y to yank the text back at end of line
    ;; (defun cd2/inline-comment-command () ; this is the function called when you repeat the command
    ;;   ;; do nothing (not killing the end-of-line comment)
    ;;   (setq this-command nil) ; This is just a trick so that the command can still be called indefinitely
    ;;   )
    (define-key org-mode-map (kbd "M-;") 'org-comment-dwim-2)
    :bind ("M-;" . comment-dwim-2))
#+end_src

**** zzz to char

| =zzz to char= | https://github.com/mrkkrp/zzz-to-char |

Replace ~zap-to-char~ and ~zap-up-to-char~ with ~zzz~ equivalents. I
can select a  specific character, either forward or back, with the
home row. As opposed to the closest character.

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (use-package zzz-to-char
    :bind ("M-z" . zzz-to-char))
#+end_src

*** Languages

**** Ruby

| =rbenv=    | https://github.com/senny/rbenv.el        |
| =inf-ruby= | https://github.com/nonsequitur/inf-ruby/ |
| =robe=     | https://github.com/dgutov/robe           |

=rbenv= for Emacs is 7 years old and unmainted. I'd like to replace it
sooner rather than later.

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (use-package rbenv
    :diminish
    :hook (ruby-mode . global-rbenv-mode))
#+end_src

=inf-ruby= is something I don't know how to use well yet. If you use
=irb= in =shell=, you will want the line =IRB.conf[:USE_MULTILINE] =
false= in =~/.config/irb/irbrc=, as otherwise you will just get
downward pointing arrows and no input or output.
Tested \approx 4/2020, didn't observe 11/2020 but may still be present.

[[https://github.com/nonsequitur/inf-ruby/issues/133][Here]] is a trick for guarding the IRB.conf clause so it won't impact
IRB sessions outside of Emacs. (Not tested thoroughly!)


#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (use-package inf-ruby ; Latest version has --nomultline by default, but not for bundle console, only ruby
    :hook (ruby-mode . inf-ruby-minor-mode))
#+end_src

I really want to replace =robe= with =lsp-mode= and
=solargraph=. Having to run a full-blown interpreter seems overkill
and prone to errors.

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (use-package robe
    :defines company-backends
    :diminish
    :hook (enh-ruby-mode . robe-mode)
    :config (push 'company-robe company-backends))
#+end_src

**** YAML

| =yaml-mode= | https://github.com/yaml/yaml-mode |

Pretty much only one package for YAML.

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (use-package yaml-mode
    :mode "\\.yml\\'")
#+end_src

**** Assembly

#+begin_quote
AsmMode is a simple assembly programming mode that comes with Emacs.
It is based on TextMode. See AssemblyProgramming for alternatives.

AsmMode has some strange (relative to other Emacs modes) defaults for
indentation (as of Emacs 24.5): It sets ‘tab-always-indent’ to ‘nil’
so that hitting ‘TAB’ will each time insert a tab stop, pushing the
code farther to the right. Therefore I suggest using the following
config which resets ‘tab-always-indent’ back to the default:
#+end_quote

~asm-comment-char~ seems to have been deprecated, so I removed it.

[[https://www.emacswiki.org/emacs/AsmMode]]

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (defun my-asm-mode-hook ()
    ;; asm-mode sets it locally to nil, to "stay closer to the old TAB behaviour".
    (setq tab-always-indent (default-value 'tab-always-indent)))

  (add-hook 'asm-mode-hook #'my-asm-mode-hook)
#+end_src

*** Org

**** Main

| =org= | https://orgmode.org/ |

I use a more up-to-date version of Org than what Emacs ships with.
Currently ~org-adapt-identation~ does not work with ~'headline-data~.
(At least, I haven't gotten it work successfully.) Tested 11/2020.

Additionally, I want org to support as many languages as possible
without needing to add them all to ~org-babel-load-languages~.

I added a function from [[https:emacs.stackexchange.com/questions/3387][StackExchange]] to update \( \LaTeX \) symbols
as I zoom in. For time sake, the code that toggles the preview was
removed, as Emacs takes quite a while to regenerate the images. When
rapidly zooming (e.g. C-mouse-4), Emacs could even halt entirely. I do
let it remove existing previews so I don't have a mix of small and big
previews.

I'm currently trying to write advice for ~org-export-dispatch~ to add
the org-latex-logfile-extensions when initially exporting the file.

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (use-package org
    :mode (("\\.org$" . org-mode))
    :hook (org-mode . turn-on-auto-fill)  ; Don't make me spam M-q
    :bind (("C-c a" . org-agenda)
	   :map org-mode-map
	   ;; TODO: try to move counsel bindings to use-package counsel
	   ("C-c C-j" . counsel-org-goto)
	   ("C-c C-q" . counsel-org-tag))
    :after (counsel)                      ; Not functionally needed, just in case for the binding
    :init
    ;; Override highlighted headings in minibuffer (projectile, swiper, etc)
    ;; Use face-remap-add-relative so it's buffer local
    (defun override-org-level-faces ()
      (dolist (face '(org-level-1
		      org-level-2
		      org-level-3
		      org-level-4
		      org-level-5
		      org-level-6
		      org-level-7
		      org-level-8))
	;; FIXME below likely bugged, see messages when opening emacs
	(face-remap-add-relative face '(;:weight 'normal
					:height 1.0
					  ;	:foreground (face-foreground 'default)
					  ;	:background (face-background 'default)))))
					))))
    (add-hook 'minibuffer-setup-hook 'override-org-level-faces)
    :config
    (setq org-startup-folded t
	  org-highlight-latex-and-related '(native)
	  org-cycle-separator-lines 1
	  org-log-done 'time
	  org-adapt-indentation nil
	  org-fontify-whole-block-delimiter-line nil
	  org-latex-prefer-user-labels t
	  ;; org-hide-emphasis-markers t
	  org-confirm-babel-evaluate nil
	  org-agenda-files '("~/org")
	  org-format-latex-options (plist-put org-format-latex-options :scale 1.5)
	  org-blank-before-new-entry '((heading . t) (plain-list-item . t))
	  org-latex-logfiles-extensions (quote ("lof" "lot" "tex~" "aux" "idx" "log"
						"out" "toc" "nav" "snm" "vrb" "dvi"
						"fdb_latexmk" "blg" "brf" "fls" "entoc"
						"ps" "spl" "bbl"))
	  org-todo-keywords '((sequence "TODO" "WAITING" "|" "DONE" "CANCELLED"))
	  org-todo-keyword-faces '(("WAITING" . "magenta")
				   ("CANCELLED" . "orange")
				   ("DONE" . "darkgrey")) )
    (add-to-list 'org-file-apps '("\\.pdf\\'" . emacs))
    (font-lock-add-keywords 'org-mode
			    '(("^ *\\([-]\\) "
			       (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))
    ;; Decrease heading size based on level
    (let ((i 1.5))
      (dolist (face '(org-level-1
		      org-level-2
		      org-level-3
		      org-level-4
		      org-level-5
		      org-level-6
		      org-level-7
		      org-level-8))
	(set-face-attribute face nil :weight 'semi-bold :height i)
	(setq i (- i 0.05))))
    (org-babel-do-load-languages
     'org-babel-load-languages '((C . t)
				 (emacs-lisp . t)
				 (ruby . t)
				 (gnuplot . t)
				 (mermaid . t)
				 (shell . t)))
    ;; Automatically add used languages to org-babel
    ;; REMOVED due to incompatibilities when using #+CALL:
    ;; (defadvice org-babel-execute-src-block (around load-language nil activate)
    ;;   "Load language if needed"
    ;;   (let ((language (org-element-property :language (org-element-at-point))))
    ;;     (unless (cdr (assoc (intern language) org-babel-load-languages))
    ;; 	(add-to-list 'org-babel-load-languages (cons (intern language) t))
    ;; 	(org-babel-do-load-languages 'org-babel-load-languages org-babel-load-languages))
    ;;     ad-do-it))
    (defun update-org-latex-fragment-scale ()
      (org-latex-preview '(64))
      (let ((text-scale-factor (expt text-scale-mode-step text-scale-mode-amount)))
	(plist-put org-format-latex-options :scale (* 2.3 text-scale-factor))))
    (add-hook 'text-scale-mode-hook 'update-org-latex-fragment-scale))
  ;; (define-advice org-export-dispatch (:after nil logfiles-update)
  ;; (message "hi")))
  ;; (unless (member "tex" org-latex-logfiles-extensions)
  ;;   (dolist (extension '("lof" "lot" "tex~" "aux" "idx" "log" "out" "toc" "nav" "snm"
  ;; 			 "vrb" "dvi" "fdb_latexmk" "blg" "brf" "fls" "entoc" "ps" "spl" "bbl"))
  ;;     (add-to-list 'org-latex-logfiles-extensions extension)))))
#+end_src

**** Extensions

***** org-superstar

| =org-superstar= | https://github.com/integral-dw/org-superstar-mode |

I enjoy colored bullets. I might remove
~org-superstar-leading-bullets~ since it doesn't bother me too much
and doesn't seem to work anyway.

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (use-package org-superstar
    :hook (org-mode . org-superstar-mode)
    :config
    (org-superstar-configure-like-org-bullets) ; FIXME stars are still visible despite below line
    (setq org-superstar-leading-bullet ?\s))
#+end_src

***** ob-mermaid

| =ob-mermaid=    | https://github.com/arnm/ob-mermaid                |

A picture is worth a thousand words, even in Org. I should try to make
it more compatible with other installation paths, including the
default (not hidden). I also include ~mermaid-mode~, making editing a
lot more tolerable.

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (use-package ob-mermaid
    :after org
    :config
    (setq ob-mermaid-cli-path "~/.node_modules/.bin/mmdc"))

  ;; TODO: defer loading
  (use-package mermaid-mode
    :config
    (setq mermaid-mmdc-location "~/.node_modules/.bin/mmdc"))
#+end_src

***** gnuplot

| =gnuplot=       | https://github.com/emacsorphanage/gnuplot         |

While not quite a picture, graphs are also nice to have. This allows
for gnuplot src blocks in org mode. The =gnuplot= emacs package might also be
required, although I think it comes built in with recent versions of
=org=.

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
    (use-package gnuplot)
#+end_src

***** Org Crypt

Confusingly, =Org Crypt= *must* be loaded before =org=.
~org-crypt-use-before-save-magic~ creates an org-mode hook that
creates a before-save hook to encrypt the file. When loading is
deferred, the org hooks will execute before this hook is added,
meaning headings will not encrypt on save.

I wasn't able to solve this issue, so I just removed the autoload that
~:bind~ adds with ~:demand~.

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (use-package org-crypt
    :straight nil
    :demand t
    :bind ("C-c d" . org-decrypt-entries)
    :config
    (org-crypt-use-before-save-magic)
    (setq org-crypt-key "1982679C"        ; Change to your key
	  epg-pinentry-mode 'loopback
	  org-crypt-disable-auto-save t
	  org-tags-exclude-from-inheritance '("crypt")))
#+end_src

***** mixed-pitch

| =mixed-pitch= | https://gitlab.com/jabranham/mixed-pitch |

#+begin_quote
Mixed pitch is a minor mode that enables mixing fixed-pitch (also known as
fixed-width or monospace) and variable-pitch (AKA “proportional”) fonts. It
tries to be smart about which fonts get which face. Fonts that look like code,
org-tables, and such remain fixed-pitch and everything else becomes
variable-pitch. The variable ~mixed-pitch-fixed-pitch-faces~ is a list of faces
that will remain fixed-pitch in ~mixed-pitch-mode~.
#+end_quote

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (use-package mixed-pitch
    :hook (org-mode . mixed-pitch-mode))
#+end_src

***** ox-hugo

| =ox-hugo= | https://ox-hugo.scripter.co/ |

#+begin_quote
ox-hugo is an Org exporter backend that exports Org to Hugo-compatible
Markdown (Blackfriday) and also generates the front-matter (in TOML or
YAML format).
#+end_quote

In other words, this is great for blogging. It supports multiple posts
per =org= file, separated by top level headings. I suspect this'll be
my preferred way to edit.

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
(use-package ox-hugo
  :after ox)
#+end_src

*** Utilities

This is meant for utility packages that don't assist with editing,
navigation, or similar, but still provide a benefit.

**** 0xc

| =0xc= |  https://github.com/AdamNiederer/0xc |

A package that provides easy base conversions inside of Emacs.

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (use-package 0xc
    :commands (0xc-convert 0xc-convert-point 0xc-live-convert))
#+end_src

**** Esup

| =Esup= | https://github.com/jschaf/esup |

Profile Emacs startup times with =M-x esup=. There's an apparent issue
with some combination of =straight=, =esup= and byte-compiling that
causes =Esup= to fail to run, either showing =Symbolic link to Git...=
or another error message. [[https://github.com/jschaf/esup/issues/54#issuecomment-651247749][This]] contains a fix.

It seems the fix isn't perfect, Esup is largely underestimating my
startup time. When I look in the breakdown, large sections of the code
are unaccounted for.

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (use-package esup
    :commands esup
    :config (setq esup-depth 0))
#+end_src

**** PDF Tools

| =PDF Tools= | https://github.com/politza/pdf-tools |

#+begin_quote
PDF Tools is, among other things, a replacement of DocView for PDF
files. The key difference is that pages are not pre-rendered by e.g.
ghostscript and stored in the file-system, but rather created
on-demand and stored in memory.

[…]

Actually, displaying PDF files is
just one part of PDF Tools. Since poppler can provide us with all
kinds of information about a document and is also able to modify it,
there is a lot more we can do with it.
#+end_quote

This package requires a Unix-based OS.

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (unless sys/win32p
    (use-package pdf-tools
      :mode ("\\.pdf\\'" . pdf-tools-install)
      ;; One of the two of these settings help improve display on my
      ;; thinkpad x13 hidpi, not sure which lol
      ;; https://github.com/politza/pdf-tools/issues/51
      :config (setq pdf-view-use-scaling t
		    pdf-view-use-imagemagick t)))
#+end_src

**** Restart Emacs

| =restart-emacs= | https://github.com/iqbalansari/restart-emacs |

A small package to restart Emacs within Emacs.

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
      (use-package restart-emacs
        :commands restart-emacs
        :config (setq restart-emacs-restore-frames t))
#+end_src

**** Unbound

| =unbound= | https://www.emacswiki.org/emacs/unbound.el |

Find unbound keys with ~describe-unbound-keys~ and enter a number
representing complexity.

FIXME: Fixed most errors except an ~Unused lexical variable 'i'~ in
~defun key-complexity~. The variable is definitely used; I'm not sure
what the issue is.

#+begin_src emacs-lisp :tangle no
    ;;; unbound.el --- Find convenient unbound keystrokes

  ;; Copyright (C) 2007 Davis Herring

  ;; Author: Davis Herring <herring@lanl.gov>
  ;; Version: 0.1
  ;; Maintainer: Davis Herring
  ;; Keywords: keyboard

  ;; This file is not part of GNU Emacs.

  ;; This program is free software; you can redistribute it and/or modify
  ;; it under the terms of the GNU General Public License as published by
  ;; the Free Software Foundation; either version 2, or (at your option)
  ;; any later version.

  ;; This program is distributed in the hope that it will be useful,
  ;; but WITHOUT ANY WARRANTY; without even the implied warranty of
  ;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  ;; GNU General Public License for more details.

  ;; You should have received a copy of the GNU General Public License
  ;; along with this program; see the file COPYING.  If not, write to the
  ;; Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor
  ;; Boston, MA 02110-1301, USA.

    ;;; Commentary:
  ;; The only entry point is `describe-unbound-keys'; it prompts for the maximum
  ;; complexity to allow, which should probably be at least 5 to find enough
  ;; keys to be worthwhile.  Lisp may call just `unbound-keys' to get a list of
  ;; key representations suitable for `define-key'.

    ;;; Code:

  (eval-when-compile (require 'cl))       ; for `dotimes', `push' (Emacs 21)

  (defgroup unbound nil                   ; Silence group not specified warnings from compiler
    "Show unbound keys based on complexity."
    :group 'convenience)

  (defcustom unbound-modifiers '(control meta shift)
    "Modifiers to consider when searching for unbound keys."
    :type '(set (const control) (const meta) (const shift)
                (const super) (const hyper) (const alt)))

  (defvar unbound-key-list
    (let (keys)
      (dotimes (i (- ?\d ?\  -1))
        (push (+ i ?\ ) keys))
      (dotimes (i 12)
        (push (intern (format "f%s" (1+ i))) keys))
      (append '(?\t ?\r ?\e) (nreverse keys)
              '(insert delete home end prior next up down left right)))
    "Keys to consider when searching for unbound keys.")

  (defun key-complexity (key)
    "Return a complexity score for key sequence KEY.
    Currently KEY must be of the [(control shift ?s) ...] format."
    (let ((ret 0))
      (dotimes (i (length key) ret)
        (setq ret (+ ret (* i 2) (key-complexity-1 (aref key i)))))))

  ;; This is somewhat biased for US keyboards.
  (defun key-complexity-1 (key)           ; key:=(modifiers... key)
    (+ (if (memq 'control key) 1 0)
       (if (memq 'meta key) 2 0)
       (if (memq 'shift key) 3 0)
       (if (memq 'super key) 4 0)
       (if (memq 'hyper key) 4 0)
       (if (memq 'alt key) 3 0)
       (* 2 (1- (length key)))
       (progn
         (setq key (car (last key)))
         (if (integerp key)
             (cond ((and (>= key ?a) (<= key ?z)) 0)
                   ((and (>= key ?A) (<= key ?Z)) 6) ; capitals are weird
                   ((and (>= key ?0) (<= key ?9)) 2)
                   ((memq key '(?\b ?\r ?\ )) 1)
                   ;; Unshifted punctuation (US keyboards)
                   ((memq key '(?` ?- ?= ?\t ?\[ ?\] ?\\ ?\; ?' ?, ?. ?/)) 3)
                   ;; Other letters -- presume that one's keyboard has them if
                   ;; we're going to consider binding them.
                   ((let (case-fold-search)
                      (string-match
                       "[016A]" (category-set-mnemonics
                                 (char-category-set key)))) 2)
                   (t 5))
           7))))

  ;; Quiet the byte compiler
  (defvar unbound-keys nil
    "Used internally by `unbound-keys'.")

  (defun unbound-keys (max &optional map)
    "Return a list of unbound keystrokes of complexity no greater than MAX.
    Keys are sorted by their complexity; `key-complexity' determines it."
    (let (unbound-keys)
      (unbound-keys-1 max map nil)
      (mapcar 'car (sort unbound-keys (lambda (k l) (< (cdr k) (cdr l)))))))

  ;; Adds to `unbound-keys'.
  (defun unbound-keys-1 (max map pfx)
    (dolist (base unbound-key-list)
      (dotimes (modi (lsh 1 (length unbound-modifiers)))
        (let ((key (list base)))
          (dotimes (j (length unbound-modifiers))
            (unless (zerop (logand modi (lsh 1 j)))
              (push (nth j unbound-modifiers) key)))
          (let ((total (vconcat pfx (list key))) comp)
            ;; Don't use things that get translated and bound.  This isn't
            ;; perfect: it assumes that the entire key sequence is translated.
            (unless (or (let ((trans (lookup-key function-key-map total)))
                          (and (vectorp trans) (key-binding trans)))
                        ;; Don't add `shift' to any graphic character; can't
                        ;; type it, or it's redundant.
                        (and (memq 'shift key) (integerp base)
                             (> base ?\ ) (<= base ?~))
                        ;; Don't add `control' when it generates another
                        ;; character we use:
                        (and (memq 'control key) (integerp base)
                             (< base ?`)
                             (memq (- base 64) unbound-key-list))
                        ;; Limit the total complexity:
                        (> (setq comp (key-complexity total)) max))
              (let ((res (if map (lookup-key map (vector key))
                           (key-binding (vector (if (cdr key) key (car key)))))))
                (cond ((keymapp res)
                       ;; Don't add anything after an ESC, to avoid Meta
                       ;; confusion.
                       (unless (eq base ?\e)
                         (unbound-keys-1 max res total)))
                      (res)
                      (t (push (cons total comp) unbound-keys))))))))))

    ;;;###autoload
  (defun describe-unbound-keys (max &optional map)
    "Display a list of unbound keystrokes of complexity no greater than MAX.
    Keys are sorted by their complexity; `key-complexity' determines it."
    (interactive
     (list (read-number "Maximum key complexity: ")
           (intern (read-string "Keymap (default global-map): " nil nil "global-map"))))
    (unless (keymapp (eval map)) (error "%s is not a keymap" map))
    (with-output-to-temp-buffer "*Unbound Keys*"
      (let ((keys (unbound-keys max (eval map))))
        (princ (format "%s unbound keys in %s with complexity at most %s:\n"
                       (length keys) map max))
        (princ (mapconcat 'key-description keys "\n")))))

  (provide 'unbound)

  ;; Local variables:
  ;; indent-tabs-mode: nil
  ;; End:

    ;;; unbound.el ends here
#+end_src

**** vterm

| =vterm= | https://github.com/akermu/emacs-libvterm |

A capable terminal emulator. This is compatible with =irb= multiline.
Projectile also supports creating a named vterm with
~projectile-run-vterm~.

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (use-package vterm
    :commands vterm
    :config (setq vterm-timer-delay 0.01))
#+end_src

***** vterm-toggle

| =vterm-toggle= | https://github.com/jixiuf/vterm-toggle |

#+begin_quote
This package provides the command vterm-toggle which toggles between
the vterm buffer and whatever buffer you are editing.
#+end_quote

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (use-package vterm-toggle
    :commands vterm-toggle vterm-toggle-cd
    :bind ("C-c v" . vterm-toggle))
#+end_src

**** Magit

| =magit= | [[https:magit.vc]] |

I'm certainly not at a point where I fully grasp the intricacies of
=magit= (=git= alone is enough of a pain!), but I can't possibly get
better without practice!

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
    (use-package magit
      :after transient)
#+end_src

**** ix

| =ix= | https:github.com/theanalyst/ix.el |

A simple interface to =ix.io=, a pastebin. I'm not using a username or
password because I shouldn't upload anything private to =ix.io=
anyway.

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (use-package ix)
#+end_src

*** Games

**** Zone

A neat little screensaver for buffers.

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (use-package zone
    :commands (zone-when-idle zone-choose)
    :defer 5
    :config
    (zone-when-idle 600)
    (defun zone-choose (pgm)
      "Choose a PGM to run for `zone'."
      (interactive
       (list
        (completing-read
         "Program: "
         (mapcar 'symbol-name zone-programs))))
      (let ((zone-programs (list (intern pgm))))
        (zone))))
#+end_src

**** Fireplace

| =fireplace= | https://github.com/johanvts/emacs-fireplace |

Another screensaver package.

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (use-package fireplace
    :commands fireplace)
#+end_src

*** Media

**** RSS

***** elfeed

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (use-package elfeed
    :bind ("C-c n" . elfeed))
#+end_src

****** elfeed-org

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (use-package elfeed-org
    :after elfeed
    :config
    (setq rmh-elfeed-org-files
	  (list
	   (concat user-emacs-directory"var/elfeed/rmh-elfeed.org")))
    (elfeed-org))
#+end_src

****** Subscriptions						      :crypt:

-----BEGIN PGP MESSAGE-----

hQIMA341lovNpziwAQ//Ub/WGdUK+0rHqdnMZITRVpWF/zwuWE0TPfcazql8rmLv
DzlhNLE6jMY6s4Ow/xKbEwOLXDLu3FHno438J+/KEmvBC7dXp7uhuLMCVlQNOpkn
aatlJX50j4A7G1lMd9l/WZOTykMIr8ACaDETWmtk2ZOkh/Qlnhk68GISVpfpHHsQ
LOF0lmoUagp4v/nNhMe+nLETFVIX25A58JYUApSBQ/nX1xqPyTIIXJWgTg+e/B5N
fyOP0x4fjLBM7CXYyP6Mh//5l8JPBMiTaM5OACG60+2Hn69V3u4tb1siB3RZmWcm
CkbwwlhxRNRs8di0P7aAdc7/zpsNcKeXO24cEkHKiCqYBPfqU33CQylp7TnZAElh
sBiLHxsaskSPNo0n+nSNpqP3xfVEKlkVq5H+zBndV0Kn60mmZf8zWbryS+Pb5x66
ZT7UPKR9xnnB97pFVNcft/xOQZD35jn6zaKG2MPSuH1AibYdWkXMeJ/TRVvJhuwG
r7sR+Rzp7ZJxz9cm4x+IWXj7rIPnjZLdSm7dy0/i1eLGlU8wiFQp2jaGos+etCBo
d4Qy3WaksB1pMGpKrTEHvPC4hxNCLXKGydgzsmXPo3kWm7UMnd56ajITDbx6JqNW
EMnKzC/9oOKr2K6LWKs1ZouZ1vhWAX4ZVuTRMmAXGfD1botHF3qy4gzniUQDXc7S
6QG8bQzpKcfnNRd8WZgMkgOUuaHHcFEDxT6y3Y+dUhldcy2ybgJpFCeU+NWf2s4B
ph8kXZWSgn74pNGWj9su7tGOlNs9ZAeYv9DT9ej2yFT7P7M5WoCoWdVwXpEPeTMr
6gmHrGKG+FliV4UFvCGLRs1RlUMoHaVGz02IaMx85jn8qCl4sRMfAwFewV0z8Cyg
108X3htiJglbiAURCj2fizXIXC5L7tdVObeCRQYakQsT6CaC5oVexW9g4t1k4TA7
ndi3uyCHrp4YnAF4mbc5agDmHqExCZDLScfrb2gEvjzwvknUnbPTIEiTJ9kvfFEV
FXgvDrxeZNU7uenMvLM4GkOS+u1/OZn7x1HFtUDmEuvTQI9+ujIV8MPsc1GHzbMw
HbVZdUzzfHHuNYq0YxG9CVPJtjfGx8C0A8zgjHaqiDOwQmo22z6lHJxlsJZZpSvQ
ExVEvJ6sSA6Wu0valwGc3hdDxUaKTC4YcHdOkYjRXRmdk0Sy3QGX+7BMzcWYQMAe
Kn2YVhP2Qy1D5QwDZwgPOTWHS+rahiMlKtoJZfBdvGfxejcKP+byDDcPQHxOzXTR
dZdCYbfdL0Q+Cj8ap9wjcuOUsH1K8NP76H+DW7gRtVczVA9cmNYGAfP1CBq8KKya
6FbrlVhLJqX7rma/ZasXVLTIeLVfuiAxYwEn2MjHDv64wB/9Xb4OEJDiieweoylr
mB6gFvVbvPhu6Wy8NkvYX0Fqu7THJUaYSijEE//hRP+SwdbKi/Tw/MRaScqgezQV
p5D9hm8MxFtbF4ya2hpCzx2kwaJc0AuypL7Dk5sUEJnx2lExAG9qKZhUUgAxzEGO
CRLXAsgwP7CeS9JA7VBdukAddsOscJvUaCPI5VioMuf6aw9NqhpggSFxz/qCAEey
tck5ylg4kx0u+EUPXj+Aq5nJhUAjrwPUCQank7rAN1YHOheWu+WOW16tF032eDQE
Ft2CARQDby2nIagZVzoDbS1y
=qcVn
-----END PGP MESSAGE-----


**** IRC

***** Helper Functions

I want ~my/erc-start-or-switch~ to select a visible =erc= window, if
present, then run ~erc-track-switch-buffer~.

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (defun my/erc-first-visible-window ()
      "Returns first visible erc window, or nil if none visible"
    (let ((retbuffer nil))
      (dolist (buffer (erc-buffer-list) retbuffer)
	(when (erc-buffer-visible buffer)
	  (setq retbuffer buffer)))
      (if retbuffer
	  (get-buffer-window retbuffer 'visible)
	nil)))
#+end_src

A wrapper function I modified from [[https://old.reddit.com/r/emacs/comments/8ml6na][Reddit]].

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (defun my/erc-start-or-switch ()
    "Connects to ERC, or switch to last active buffer."
    (interactive)
    (let ((erc-window (my/erc-first-visible-window)))
      (if erc-window (select-window erc-window) nil))
    (if (erc-buffer-list)
	(erc-track-switch-buffer 1)
      (when (y-or-n-p "Start ERC? ")
	;; Relies on erc-nick and erc-password being set
	(erc :server "irc.libera.chat" :port 6667))))
#+end_src

***** =erc=

Basic =erc= configurations.

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  (use-package erc
    :straight nil
    :commands erc-buffer-list erc-track-switch-buffer erc-buffer-visible
    :bind ("C-c e" . my/erc-start-or-switch)
    :config
    (setq erc-autojoin-channels-alist
	  '(("libera.chat" "#emacs" "#emacs-beginners"
	     "#erc" "#gentoo" "#gentoo-embedded"
	     "#kde" "#libera" "#linux" "#org-mode"
	     "#pine64" "#sway" "#sway-devel" ))
	  erc-autojoin-timing 'ident
	  erc-fill-function 'erc-fill-static
	  erc-fill-static-center 16
	  erc-join-buffer 'bury
	  erc-hide-list '("JOIN" "PART" "QUIT" "NICK")
	  ;; See https://datatracker.ietf.org/doc/html/rfc1459
	  ;; for explanation of number codes
	  erc-track-exclude-types '("JOIN" "NICK" "PART" "QUIT" "MODE"
				    "324" "329" "332" "333" "353" "477"))
    (let ((libera-credentials (netrc-credentials "irc.libera.chat")))
      (setq erc-nick (nth 0 libera-credentials)
	    erc-password (nth 1 libera-credentials))))
#+end_src



***** Authentication						      :crypt:

-----BEGIN PGP MESSAGE-----

hQIMA341lovNpziwARAAtQNJrFX21MKSwZikbJAlb1Lca8NqUzVehbp3EC41wd1P
v65rKx5F/QFv6iQliQB7S6codI68kyzfbOrvkiH1tgOTSSNjylM/VAsP5r1FuiNP
RYBDareJcFJximWDy6emVkqyZUvJM/eGMpw6Iq+YldnGX4QzMtm0kLHVvQLYBqRr
lTyg7vHIycSzlH1iofmOhxMrFg4oZl2XpzzJMvUBiXcn0GCnQ2BjC1AESc1+oOSA
iJs1/g748JC0cYcPPXRud9ACVc6/spqH1Se+hTkvPHIow/oCaovYCFP2zNuGW+tW
lhZrG6fFgHvbvD4gSTlJMrBclM+zY/tAyvjOTmd0MGoCPca5l9FM1Bc6bfRFm1E9
QF2vyDcklKiBTs8yY12K24RAjNBGJHkTtsqHzk+kGzWuZnZw/7AzGdrO8dHH66KM
vSEu098unsij66mzqIkTDH+A5uNH9tr0z2WarsMYYNaPuK9UcpRHdh93JaZ8LrWz
G4bCnwdOmBmYbJDehHK6htZDnkz/kcEXpO8NUmIqiiGxkt7TCYmaDOEvJDcnBWFa
bYAHi+sfCUza8IQebPrLlRJI7MtFsFxLxCrI/WtA7sqn4XbqA7mAtaAr/oLldjW8
r5+7lVLB/6A5cGoCPMP8Qr9E3/uhBFu9yBNbg3Rrrjd0kbUlPtjXiEcKO58/FAfS
rgHgyaf5pVIs+FjhC1oMZeyaTetCBulSXRoWAx7Br3ve5nyRnCeOJN9MyZnZAYfk
hJ71X71//QlaYqoTHtnH8rSQuQ1RuycJrh+PA3iMJ824G6U8dcA2JZms9Gfbm+Yr
5stY9bRRniI8uNIq/UJsodACzyw/t17JBaunhWxauQFNm8ZYrGssDmhvdlsVvQnH
x5ExULI5UdL3R/uMaQv00LW4ApCZbsLahl7ELf8TeA==
=K4WU
-----END PGP MESSAGE-----

** Encrypted							      :crypt:

-----BEGIN PGP MESSAGE-----

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
=HguD
-----END PGP MESSAGE-----


** List of TODOs

*** TODO Move to solargrph and lsp-mode
*** TODO move functions to :preface in =use-package=
*** TODO Make an actual TODO list.
*** DONE Alphabetize sensible defaults
CLOSED: [2020-11-10 Tue 14:49]
*** DONE Some sort of solution to prevent needing to initialize straight in init
CLOSED: [2020-11-09 Mon 11:02]
Don't want to do that.
https://jonathanabennett.github.io/blog/2019/05/28/emacs.org-~-may-2019/
might have a solution with tangling.
*** DONE Do we need straight in init.el?
CLOSED: [2020-11-09 Mon 11:02]
Any drawbacks from loading with old org version then upgrading?
*** DONE Can we move speedup into =early-init.el=?
CLOSED: [2021-02-23 Tue 22:44]
[[https://old.reddit.com/r/emacs/comments/dppmqj/do_i_even_need_to_leverage_earlyinitel_if_i_have/][This]] talks about how disabling certain decorations in early init is
faster. I'm curious how I can get org-tangle to export some code
blocks in one file and other code blocks in another file.

If I do this, I should set package-enable-at-startup to nil as well.

And loading org in early init wouldn't be a bad idea either.
*** TODO Compatibility with tty
It had previous failed to load in a tty, complaining about listp nil.
I'm not reproducing the error now, just keep an eye out?
*** TODO Better loading on gnuplot and fix two attempts to execute src blocks.
I would like to have it delay until either opening a gnuplot file or when
executing gnuplot source blocks. Additionally it fails to execute src
blocks on the first attempt when launching emacs, requiring two
attempts.

Failing to execute gnuplot on the first attempt doesn't seem to just
be limited to gnuplot, but C as well. Probably an issue with my babel advice.
*** TODO Restore autosave transform
Currently files fail to save and a warning periodically appears with
it enabled.
*** TODO ltximg folder no littering

*** TODO Add float package to ~org-latex-packages-alist~



* Encrypted							      :crypt:

-----BEGIN PGP MESSAGE-----

hQIMA341lovNpziwAQ//Tg84kr5axMm1v8u0o8whN6A+7oEO0JOCD9K40XO/mUwt
9SiNK63p4laZrtFfG67PPQjF47NT6QF3lmmwCxvMTxids9YXAmf/YCuSszp+2BG0
TQL7W2Yrvjvz11eQL4DxttrvKa/lUVX0Zxh2y7BqYxDW5EvXsIk9eXSp1d5N9PXD
YNfeKvJlPk5fu2rhaxZRVgkdPlx68cxJlMtAaG+Hm9jzqttAfLVD2S1xFMd32e6a
tLDxTzBp2a75FQddXGxduw7Xm8cJnaEB75TA5d80HvLfuDjtsbUfUhCWkqyDUygr
G1of19Z2GMfOgunrOllBiJxIQGY6eucXDO2+6mcOlbmRD8ajjcJHrWh8LLgXiekM
yCe3KPkOH6JrgWXPYWDb7ltWkyWW7/1FfZ6kdmNq931BQfhruPIo2xa4FGD7r711
Mj9gHhP8Wi0luK67FL++ilk4n+NPxA9wTyk4dmQEAxm/YrkfuM7M7/UIUcL7+q0D
MAS2noU34oST3ciFkC3PVm/rVr+2otn/L6q4WhtOM8TlpF6U6lDio3KgGtHIgQdi
dPbSbpPbMOVaN/3K0GSrFSYQtwVT86p6BZFTf3wYkXiRW9y/ONd+nXMaNbSK1Plo
AvthbkutZc/js9N8j2pextu/cl+OgO3dM9eISyPnlD1/qk+slyPNXDIT9YkFoNrS
wKsBBpWVvRSqJIBCUJhR3YTRRamsn3LDDk5WquE40ojlTFGzEokBDxGpWFacHJ+Y
RXeLG+8vx6sXTFFOxubumDDctSvFMdDY5UN4/zCBwtIiHk3T15nNnIWN3N3qogrH
cnQjeHI6UaXZVuIhleXu5C1QQm8FP3qVT7T3yOxjh79vTwRCiVq9n8fKc9SOuOOz
JFnHXZU5hiZ2xBfJO4Ssq29rFjQr+COb6PFIBQPuktACnmBDEpHETDNE0i/9EerP
+zrId+zBe8qRFzGuH89LnQD1Oi0DtKBVrKIDt8NppLi9UgRA60BerJhLiffA+oB9
yQOaG532HYrEKPfm+Q3RhHrfjx/wbsPlOVVK6NGo+OLtlLyQgILy443qyz7HZkjN
B1NIBfqcmDClNwE/1GgQWJ+u+GhtmAAru9YfSVijVX77p8jRha0p8tE0+JEUNUB/
sTXnmVOdIvtESo0ts/KFVBpXOLy5nFpJVIwbXds=
=Fl3G
-----END PGP MESSAGE-----
